import socket
import json
import csv
from scapy.all import *
import threading
import nmap

def scan_port(ip, port, open_ports):
    packet = IP(dst=ip)/TCP(dport=port, flags="S")
    response = sr1(packet, timeout=1, verbose=0)
    if response and response.haslayer(TCP) and response.getlayer(TCP).flags == 0x12:
        open_ports.append(port)

def scan_ports(ip, ports):
    open_ports = []
    threads = []
    for port in ports:
        thread = threading.Thread(target=scan_port, args=(ip, port, open_ports))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    return open_ports

def detect_service_version(ip, port):
    nm = nmap.PortScanner()
    nm.scan(ip, str(port))
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            lport = nm[host][proto][port]['product']
            return lport
    return None

def save_to_csv(data, filename):
    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["IP", "Port", "Service"])
        for item in data:
            writer.writerow([item["ip"], item["port"], item["service"]])

def save_to_json(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=4)

def ping_sweep(ip_range):
    alive_hosts = []
    for ip in ip_range:
        packet = IP(dst=ip)/ICMP()
        response = sr1(packet, timeout=1, verbose=0)
        if response:
            alive_hosts.append(ip)
    return alive_hosts

def main():
    try:
        ip_to_scan = input("Entrez l'adresse IP ou la plage d'adresses IP à scanner (ex: 192.168.1.1/24): ")
        start_port = int(input("Entrez le port de début à scanner: "))
        end_port = int(input("Entrez le port de fin à scanner: "))
        output_format = input("Choisissez le format de sortie (csv/json): ").lower()

        if start_port > end_port:
            print("Le port de début doit être inférieur ou égal au port de fin.")
            return

        ports_to_scan = range(start_port, end_port + 1)

        # Ping sweep for host discovery
        ip_range = ip_to_scan.split('/')[0] + '/24'
        alive_hosts = ping_sweep(ip_range)
        if not alive_hosts:
            print("Aucun hôte actif trouvé dans la plage d'adresses IP.")
            return

        results = []
        for ip in alive_hosts:
            open_ports = scan_ports(ip, ports_to_scan)
            for port in open_ports:
                service = detect_service_version(ip, port)
                results.append({"ip": ip, "port": port, "service": service})

        if output_format == "csv":
            save_to_csv(results, "scan_results.csv")
            print("Résultats sauvegardés dans scan_results.csv")
        elif output_format == "json":
            save_to_json(results, "scan_results.json")
            print("Résultats sauvegardés dans scan_results.json")
        else:
            print("Format de sortie non pris en charge. Veuillez choisir entre csv et json.")

    except ValueError:
        print("Veuillez entrer des valeurs numériques valides pour les ports.")

if __name__ == "__main__":
    main() 
